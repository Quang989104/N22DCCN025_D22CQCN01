import tkinter as tk
import json
import os
from utils.draw import draw_board, draw_pieces, draw_piece

class BaseGameMode:
    def __init__(self, root, back_to_menu_callback, mode_name="Base"):
        self.root = root
        self.back_to_menu = back_to_menu_callback
        self.board_size = 20
        self.cell_size = 30
        self.board = [["" for _ in range(self.board_size)] for _ in range(self.board_size)]
        self.current_player = 'X'  # Ng∆∞·ªùi ch∆°i lu√¥n b·∫Øt ƒë·∫ßu v·ªõi X
        self.game_over = False
        self.mode_name = mode_name
        
        # Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc c·ª≠a s·ªï
        window_width = self.board_size * self.cell_size
        window_height = self.board_size * self.cell_size + 100  # Kh√¥ng gian th√™m cho c√°c ƒëi·ªÅu khi·ªÉn
        self.root.geometry(f"{window_width}x{window_height}")
        
        self.create_widgets()
        draw_board(self.canvas, self.board_size, self.cell_size)
        
        # T·∫°o game_data.jsonl n·∫øu ch∆∞a t·ªìn t·∫°i
        self.game_data_file = "game_data.jsonl"
        if not os.path.exists(self.game_data_file):
            with open(self.game_data_file, "w", encoding="utf-8") as f:
                pass
    
    def create_widgets(self):
        # T·∫°o khung cho b·∫£ng
        board_frame = tk.Frame(self.root)
        board_frame.pack(pady=10)
        
        # T·∫°o canvas cho b·∫£ng
        self.canvas = tk.Canvas(
            board_frame, 
            width=self.board_size * self.cell_size,
            height=self.board_size * self.cell_size,
            bg='white'
        )
        self.canvas.pack()
        self.canvas.bind("<Button-1>", self.on_click)
        
        # T·∫°o khung cho ƒëi·ªÅu khi·ªÉn
        control_frame = tk.Frame(self.root)
        control_frame.pack(pady=5)
        
        # Nh√£n th√¥ng tin ng∆∞·ªùi ch∆°i
        self.player_info = tk.Label(
            control_frame, 
            text=f"L∆∞·ª£t c·ªßa: ng∆∞·ªùi ch∆°i",
            font=("Arial", 12)
        )
        self.player_info.pack(side=tk.LEFT, padx=10)
        
        # Khung cho c√°c n√∫t
        button_frame = tk.Frame(self.root)
        button_frame.pack(pady=5)
        
        # N√∫t ch∆°i l·∫°i v√† quay l·∫°i
        tk.Button(
            button_frame, 
            text="Ch∆°i l·∫°i", 
            command=self.reset_board,
            width=15
        ).pack(side=tk.LEFT, padx=5)
        
        # S·ª≠a n√∫t "Quay l·∫°i menu" ƒë·ªÉ g·ªçi h√†m callback "back_to_menu"
        tk.Button(
            button_frame, 
            text="Quay l·∫°i menu", 
            command=self.handle_back_to_menu,
            width=15
        ).pack(side=tk.LEFT, padx=5)
    
    def handle_back_to_menu(self):
        """H√†m n√†y ƒë·∫£m b·∫£o r·∫±ng ch√∫ng ta s·∫Ω g·ªçi h√†m back_to_menu ƒë√∫ng c√°ch"""
        # Reset b·∫£ng tr∆∞·ªõc khi quay l·∫°i menu
        self.reset_board()
        
        # ƒê·∫£m b·∫£o r·∫±ng callback ƒë∆∞·ª£c g·ªçi sau m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn
        # ƒêi·ªÅu n√†y gi√∫p tr√°nh c√°c v·∫•n ƒë·ªÅ timing trong Tkinter
        if self.back_to_menu:
            self.root.after(100, self.back_to_menu)
    
    def on_click(self, event):
        if self.game_over:
            return
            
        # T√≠nh to√°n h√†ng v√† c·ªôt t·ª´ v·ªã tr√≠ click chu·ªôt
        col = event.x // self.cell_size
        row = event.y // self.cell_size
        
        # Ki·ªÉm tra xem √¥ c√≥ h·ª£p l·ªá v√† tr·ªëng kh√¥ng
        if (0 <= row < self.board_size and 
            0 <= col < self.board_size and 
            self.board[row][col] == ""):
            
            # ƒê·∫∑t n∆∞·ªõc ƒëi c·ªßa ng∆∞·ªùi ch∆°i
            self.place_move(row, col, self.current_player)
            
            # Ki·ªÉm tra n·∫øu ng∆∞·ªùi ch∆°i th·∫Øng
            if self.check_win(row, col):
                self.player_info.config(text=f"üéâ Ng∆∞·ªùi ch∆°i ƒë√£ chi·∫øn th·∫Øng!")
                self.game_over = True
                return
                
            # Ki·ªÉm tra h√≤a
            if self.is_board_full():
                self.player_info.config(text="H√≤a!")
                self.game_over = True
                return
                
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† ch·ªù n∆∞·ªõc ƒëi c·ªßa AI
            self.player_info.config(text="AI ƒëang suy nghƒ©...")
            self.root.update()  # C·∫≠p nh·∫≠t UI
            
            # L√™n l·ªãch cho n∆∞·ªõc ƒëi c·ªßa AI sau m·ªôt ch√∫t ƒë·ªô tr·ªÖ
            self.root.after(500, self.ai_move)
    
    def ai_move(self):
        """S·∫Ω ƒë∆∞·ª£c tri·ªÉn khai b·ªüi c√°c l·ªõp con"""
        raise NotImplementedError("C√°c l·ªõp con ph·∫£i tri·ªÉn khai ph∆∞∆°ng th·ª©c ai_move")
    
    def place_move(self, row, col, player):
        """ƒê·∫∑t m·ªôt n∆∞·ªõc ƒëi tr√™n b·∫£ng v√† c·∫≠p nh·∫≠t hi·ªÉn th·ªã"""
        self.board[row][col] = player
        draw_piece(self.canvas, row, col, player, self.cell_size)
        self.log_move(row, col, player)
        
        # Chuy·ªÉn ƒë·ªïi ng∆∞·ªùi ch∆°i hi·ªán t·∫°i n·∫øu c·∫ßn
        if player == 'X':
            self.current_player = 'O'
        else:
            self.current_player = 'X'
    
    def reset_board(self):
        """Reset b·∫£ng v√† tr·∫°ng th√°i tr√≤ ch∆°i"""
        self.board = [["" for _ in range(self.board_size)] for _ in range(self.board_size)]
        self.canvas.delete("all")
        draw_board(self.canvas, self.board_size, self.cell_size)
        self.current_player = 'X'
        self.game_over = False
        self.player_info.config(text=f"L∆∞·ª£t c·ªßa: ng∆∞·ªùi ch∆°i")
    
    def check_win(self, row, col):
        """Ki·ªÉm tra xem n∆∞·ªõc ƒëi cu·ªëi c√πng t·∫°i (row, col) c√≥ d·∫´n ƒë·∫øn chi·∫øn th·∫Øng kh√¥ng"""
        # L·∫•y ng∆∞·ªùi ch∆°i ƒë√£ th·ª±c hi·ªán n∆∞·ªõc ƒëi
        player = self.board[row][col]
        
        # Ki·ªÉm tra 4 h∆∞·ªõng: ngang, d·ªçc, ch√©o, ch√©o ng∆∞·ª£c
        directions = [(1, 0), (0, 1), (1, 1), (1, -1)]
        
        for dx, dy in directions:
            count = 1  # B·∫Øt ƒë·∫ßu v·ªõi 1 cho qu√¢n c·ªù hi·ªán t·∫°i
            
            # Ki·ªÉm tra c·∫£ hai h∆∞·ªõng d∆∞∆°ng v√† √¢m
            for direction in [1, -1]:
                nx, ny = row, col
                
                # Ti·∫øp t·ª•c ki·ªÉm tra theo h∆∞·ªõng n√†y mi·ªÖn l√† t√¨m th·∫•y c√°c qu√¢n c·ªù ph√π h·ª£p
                while True:
                    nx += direction * dx
                    ny += direction * dy
                    
                    # Ki·ªÉm tra ranh gi·ªõi v√† xem qu√¢n c·ªù c√≥ kh·ªõp kh√¥ng
                    if (0 <= nx < self.board_size and 
                        0 <= ny < self.board_size and 
                        self.board[nx][ny] == player):
                        count += 1
                    else:
                        break
            
            # N·∫øu t√¨m th·∫•y 5 qu√¢n c·ªù li√™n ti·∫øp tr·ªü l√™n, ƒë√≥ l√† chi·∫øn th·∫Øng
            if count >= 5:
                # L√†m n·ªïi b·∫≠t ƒë∆∞·ªùng th·∫Øng
                self.highlight_winning_line(row, col, dx, dy)
                return True
                
        return False
    
    def highlight_winning_line(self, row, col, dx, dy):
        """L√†m n·ªïi b·∫≠t ƒë∆∞·ªùng th·∫Øng tr√™n b·∫£ng"""
        player = self.board[row][col]
        positions = [(row, col)]  # B·∫Øt ƒë·∫ßu v·ªõi n∆∞·ªõc ƒëi cu·ªëi c√πng
        
        # T√¨m t·∫•t c·∫£ c√°c v·ªã tr√≠ trong ƒë∆∞·ªùng th·∫Øng
        for direction in [1, -1]:
            nx, ny = row, col
            while True:
                nx += direction * dx
                ny += direction * dy
                if (0 <= nx < self.board_size and 
                    0 <= ny < self.board_size and 
                    self.board[nx][ny] == player):
                    positions.append((nx, ny))
                else:
                    break
        
        # L√†m n·ªïi b·∫≠t m·ªói v·ªã tr√≠
        highlight_color = "green"
        for r, c in positions:
            x0 = c * self.cell_size
            y0 = r * self.cell_size
            x1 = (c + 1) * self.cell_size
            y1 = (r + 1) * self.cell_size
            
            self.canvas.create_rectangle(
                x0, y0, x1, y1, 
                outline=highlight_color, 
                width=2
            )
    
    def is_board_full(self):
        """Ki·ªÉm tra xem b·∫£ng ƒë√£ ƒë·∫ßy ch∆∞a"""
        for row in self.board:
            if "" in row:
                return False
        return True
    
    def log_move(self, row, col, player):
        """Ghi l·∫°i n∆∞·ªõc ƒëi v√†o file JSON Line ƒë·ªÉ hu·∫•n luy·ªán AI sau n√†y"""
        try:
            # ƒê∆°n gi·∫£n h√≥a d·ªØ li·ªáu ƒë·ªÉ ti·∫øt ki·ªám kh√¥ng gian
            data = {
                "move": [row, col],
                "player": player
                # C√≥ th·ªÉ l∆∞·ª£c b·ªè tr·∫°ng th√°i b·∫£ng ƒë·ªÉ ti·∫øt ki·ªám kh√¥ng gian
            }
            
            with open(self.game_data_file, "a", encoding="utf-8") as f:
                f.write(json.dumps(data) + "\n")
        except Exception as e:
            print(f"L·ªói khi ghi l·∫°i n∆∞·ªõc ƒëi: {e}")